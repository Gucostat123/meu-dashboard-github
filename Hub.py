# github_repo_info.py

import requests
import json
import pandas as pd
import math # Para c√°lculo de pagina√ß√£o

# ============================================================================
# üéØ PASSO 1: CONFIGURA√á√ïES DA API [EDIT√ÅVEL - OBRIGAT√ìRIO]
# ============================================================================

GITHUB_API_BASE_URL = "https://api.github.com"

# üë§ Nome de usu√°rio do GitHub para buscar os reposit√≥rios
GITHUB_USERNAME = "google" # ‚úèÔ∏è SUBSTITUA PELO NOME DE USU√ÅRIO (ex: "microsoft", "torvalds")

# üîë SEU TOKEN DE ACESSO PESSOAL DO GITHUB (PAT)
# Gere em: github.com -> Settings -> Developer settings -> Personal access tokens (classic)
# Marque o escopo 'repo' para este exerc√≠cio para garantir acesso completo.
GITHUB_TOKEN = "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" # ‚úèÔ∏è SUBSTITUA POR SEU TOKEN REAL

# N√∫mero de itens por p√°gina na API (m√°ximo permitido pelo GitHub √© 100)
PER_PAGE = 100

# ============================================================================
# ‚öôÔ∏è PASSO 2: FUN√á√ÉO PARA OBTER TODOS OS REPOSIT√ìRIOS (COM PAGINA√á√ÉO)
# ============================================================================

def get_all_user_repositories(username, token=None):
    """
    Busca TODAS as informa√ß√µes sobre os reposit√≥rios p√∫blicos de um usu√°rio do GitHub,
    lidando com pagina√ß√£o.
    Retorna uma lista de dicion√°rios com os dados dos reposit√≥rios.
    """
    all_repos_data = []
    page = 1
    total_pages = 1 # Inicia com 1, ser√° atualizado pela primeira requisi√ß√£o

    headers = {
        "Accept": "application/vnd.github.v3+json"
    }

    if token:
        headers["Authorization"] = f"token {token}"
        print("Usando Token de Acesso Pessoal para autentica√ß√£o...")
    else:
        print("Fazendo requisi√ß√£o sem autentica√ß√£o (sujeito a limites de taxa muito baixos)...")

    print(f"Buscando todos os reposit√≥rios de: {username}...")

    while page <= total_pages:
        repos_url = f"{GITHUB_API_BASE_URL}/users/{username}/repos?per_page={PER_PAGE}&page={page}"
        print(f"  -> Buscando p√°gina {page}/{total_pages}...")

        try:
            response = requests.get(repos_url, headers=headers)
            response.raise_for_status() # Lan√ßa exce√ß√£o para status de erro

            repos_page_data = response.json()
            all_repos_data.extend(repos_page_data) # Adiciona os repos da p√°gina atual

            # Lidar com pagina√ß√£o: O GitHub usa cabe√ßalhos 'Link' ou 'x-total-count'
            # A forma mais robusta √© usar o cabe√ßalho 'Link', mas para simplicidade
            # e para pegar o total, vamos tentar obter o total de repos diretamente se poss√≠vel.
            # Alternativamente, podemos parar quando uma p√°gina vier vazia.

            # O GitHub n√£o retorna o 'total_count' diretamente para /users/{user}/repos.
            # O jeito mais comum √© iterar at√© a resposta vir vazia ou usar o cabe√ßalho 'Link'.
            # Para este exemplo, vamos iterar at√© a p√°gina vir vazia.
            if not repos_page_data:
                break # Se a p√°gina veio vazia, n√£o h√° mais reposit√≥rios

            # Se esta for a primeira requisi√ß√£o, tente estimar o total de p√°ginas
            if page == 1:
                # GitHub tipicamente envia um header 'Link' com links para 'next', 'last' page
                # Ou podemos assumir que o 'x-ratelimit-remaining' e 'x-ratelimit-reset' podem dar dicas
                # Mas para um usu√°rio com muitos repos, apenas continuar at√© a lista vir vazia √© comum.
                # Se o usu√°rio tem mais de PER_PAGE repos, 'total_pages' ser√° mais de 1.
                # Uma estimativa simples para exibi√ß√£o, pode n√£o ser o total exato:
                # Se a primeira p√°gina j√° veio completa (PER_PAGE), assume que pode haver mais.
                if len(repos_page_data) == PER_PAGE:
                    # N√£o temos o total_count, ent√£o vamos iterar at√© n√£o vir mais nada.
                    # Definimos total_pages como um n√∫mero grande para continuar o loop,
                    # e o 'break' acima vai parar quando a resposta for vazia.
                    total_pages = math.inf # N√∫mero infinito para garantir que o loop continue
                else:
                    total_pages = page # N√£o h√° mais p√°ginas se a primeira j√° n√£o veio cheia

            page += 1

        except requests.exceptions.HTTPError as http_err:
            print(f"Erro HTTP ao buscar reposit√≥rios (p√°gina {page}): {http_err}")
            if response.status_code == 403:
                print("  -> Limite de taxa (Rate Limit) excedido. Verifique seu token ou espere.")
                if 'x-ratelimit-reset' in response.headers:
                    reset_time = datetime.fromtimestamp(int(response.headers['x-ratelimit-reset']))
                    print(f"  -> Limite reiniciar√° em: {reset_time}")
            elif response.status_code == 404:
                print(f"  -> Usu√°rio '{username}' n√£o encontrado.")
            return None
        except requests.exceptions.RequestException as req_err:
            print(f"Um erro inesperado ocorreu na p√°gina {page}: {req_err}")
            return None
    print(f"Busca completa. Total de reposit√≥rios encontrados: {len(all_repos_data)}")
    return all_repos_data

# ============================================================================
# üìä PASSO 3: FUN√á√ÉO PARA PROCESSAR E EXIBIR DADOS (RESUMO)
# ============================================================================

def process_and_display_repos_summary(repos, username):
    """Processa e exibe um resumo das informa√ß√µes dos reposit√≥rios."""
    print(f"\n--- RESUMO DOS REPOSIT√ìRIOS DE {username.upper()} ---")
    processed_repos_list = []
    for repo in repos:
        name = repo.get("name", "N/A")
        description = repo.get("description", "Sem descri√ß√£o")
        stars = repo.get("stargazers_count", 0)
        forks = repo.get("forks_count", 0)
        last_updated = repo.get("updated_at", "N/A")
        language = repo.get("language", "N/A")
        html_url = repo.get("html_url", "N/A")

        # Exibe apenas um resumo no terminal
        print(f"- {name} (‚≠ê {stars} / üç¥ {forks}) - {language} - √öltima: {last_updated}")

        # Adiciona para a lista a ser salva
        processed_repos_list.append({
            "Nome": name,
            "Descricao": description,
            "Estrelas": stars,
            "Forks": forks,
            "Ultima_Atualizacao": last_updated,
            "Linguagem_Principal": language,
            "URL": html_url
        })
    print("-----------------------------------")
    return processed_repos_list

# ============================================================================
# üíæ PASSO 4: FUN√á√ÉO PARA SALVAR DADOS EM CSV
# ============================================================================

def save_repos_to_csv(repos_data, filename="github_repos.csv"):
    """
    Salva uma lista de dicion√°rios de reposit√≥rios em um arquivo CSV.
    """
    if not repos_data:
        print("N√£o h√° dados de reposit√≥rios para salvar.")
        return

    try:
        df = pd.DataFrame(repos_data)
        df.to_csv(filename, index=False, encoding='utf-8')
        print(f"‚úÖ Dados salvos com sucesso em '{filename}' na pasta do projeto!")
    except Exception as e:
        print(f"‚ùå Erro ao salvar os dados em CSV: {e}")

# ============================================================================
# üöÄ PASSO 5: EXECU√á√ÉO PRINCIPAL
# ============================================================================

if __name__ == "__main__":
    if not GITHUB_USERNAME:
        print("‚ùå ERRO: Por favor, defina um GITHUB_USERNAME no c√≥digo.")
    else:
        # Tenta obter os reposit√≥rios, passando o token
        if GITHUB_TOKEN == "SEU_TOKEN_DE_ACESSO_PESSOAL_AQUI" or not GITHUB_TOKEN:
            print("\n‚ö†Ô∏è AVISO: GITHUB_TOKEN n√£o configurado. Recomenda-se usar um token para evitar limites de taxa!")
            all_repos = get_all_user_repositories(GITHUB_USERNAME) # Sem token
        else:
            all_repos = get_all_user_repositories(GITHUB_USERNAME, GITHUB_TOKEN) # Com token

        if all_repos:
            # Processa e exibe um resumo dos reposit√≥rios
            processed_data_for_csv = process_and_display_repos_summary(all_repos, GITHUB_USERNAME)

            # Pergunta se o usu√°rio quer salvar em CSV
            save_option = input("\nDeseja salvar todos os dados em um arquivo CSV? (s/n): ").lower()
            if save_option == 's':
                save_repos_to_csv(processed_data_for_csv)
            else:
                print("Dados n√£o foram salvos em CSV.")
        else:
            print("N√£o foi poss√≠vel obter os reposit√≥rios. Verifique as mensagens de erro acima.")