# visualize_github_repos.py

import pandas as pd
import plotly.express as px # Para gr√°ficos mais f√°ceis com Plotly
import os # Para verificar a exist√™ncia do arquivo

# ============================================================================
# üéØ PASSO 1: CONFIGURA√á√ïES DA VISUALIZA√á√ÉO [EDIT√ÅVEL]
# ============================================================================

# üìÇ Nome do arquivo CSV gerado pelo script Hub.py
CSV_FILENAME = "github_repos.csv"

# üìä Nomes dos arquivos HTML de sa√≠da para os gr√°ficos
OUTPUT_CHART_STARS = "top_repos_por_estrelas.html"
OUTPUT_CHART_LANGUAGES = "repos_por_linguagem.html"

# ============================================================================
# ‚öôÔ∏è PASSO 2: FUN√á√ÉO PARA CARREGAR DADOS E GERAR GR√ÅFICOS
# ============================================================================

def generate_interactive_charts(filename):
    """
    Carrega dados de reposit√≥rios de um CSV e gera gr√°ficos interativos Plotly.
    Salva os gr√°ficos como arquivos HTML.
    """
    if not os.path.exists(filename):
        print(f"‚ùå ERRO: O arquivo '{filename}' n√£o foi encontrado.")
        print("  -> Certifique-se de que o script 'Hub.py' foi executado e salvou o CSV corretamente.")
        return

    try:
        df = pd.read_csv(filename)
        print(f"‚úÖ Dados carregados com sucesso de '{filename}'! Total de {len(df)} reposit√≥rios.")

        # --- Gera√ß√£o de Gr√°ficos ---

        # 1. Gr√°fico de Top 10 Reposit√≥rios por Estrelas
        print(f"\nGerando '{OUTPUT_CHART_STARS}' (Top 10 Reposit√≥rios por Estrelas)...")
        # Filtra para reposit√≥rios com um nome e estrelas para evitar problemas
        df_filtered_stars = df[df['Estrelas'].notna() & df['Nome'].notna()]
        top_stars_df = df_filtered_stars.sort_values(by='Estrelas', ascending=False).head(10)

        fig_stars = px.bar(top_stars_df,
                           x='Nome',
                           y='Estrelas',
                           title='Top 10 Reposit√≥rios por Estrelas',
                           labels={'Nome': 'Reposit√≥rio', 'Estrelas': 'N√∫mero de Estrelas'},
                           hover_data=['Descricao', 'Forks', 'Linguagem_Principal', 'URL']) # Informa√ß√µes ao passar o mouse

        fig_stars.update_layout(xaxis_title="Reposit√≥rio", yaxis_title="Estrelas", title_x=0.5)
        fig_stars.write_html(OUTPUT_CHART_STARS)
        print(f"‚úÖ Gr√°fico '{OUTPUT_CHART_STARS}' salvo com sucesso!")

        # 2. Gr√°fico de Contagem de Reposit√≥rios por Linguagem Principal
        print(f"Gerando '{OUTPUT_CHART_LANGUAGES}' (Contagem de Reposit√≥rios por Linguagem)...")
        language_counts_df = df['Linguagem_Principal'].fillna('Desconhecida').value_counts().reset_index()
        language_counts_df.columns = ['Linguagem', 'Contagem']

        fig_languages = px.pie(language_counts_df,
                               names='Linguagem',
                               values='Contagem',
                               title='Distribui√ß√£o de Reposit√≥rios por Linguagem Principal',
                               hole=0.3) # Faz um gr√°fico de rosca

        fig_languages.update_traces(textposition='inside', textinfo='percent+label')
        fig_languages.update_layout(title_x=0.5)
        fig_languages.write_html(OUTPUT_CHART_LANGUAGES)
        print(f"‚úÖ Gr√°fico '{OUTPUT_CHART_LANGUAGES}' salvo com sucesso!")

        print("\nTodos os gr√°ficos interativos foram gerados na pasta do projeto.")
        print("Abra os arquivos .html no seu navegador para visualiz√°-los!")

    except KeyError as e:
        print(f"‚ùå ERRO: Coluna '{e}' n√£o encontrada no CSV.")
        print("  -> Verifique se os nomes das colunas no seu CSV correspondem aos esperados.")
        print("  -> Certifique-se de que o CSV foi gerado corretamente pelo script 'Hub.py'.")
    except Exception as e:
        print(f"‚ùå ERRO inesperado durante a gera√ß√£o dos gr√°ficos: {e}")

# ============================================================================
# üöÄ PASSO 3: EXECU√á√ÉO PRINCIPAL
# ============================================================================

if __name__ == "__main__":
    generate_interactive_charts(CSV_FILENAME)